package org.ricebin.sstable;

import org.ricebin.slice.Slice;
import org.ricebin.sstable.FilterPolicy.Reader;

public class BloomFilterPolicy {

  public static final FilterPolicy.Reader READER = new Reader() {
    @Override
    public boolean keyMayMatch(Slice key, Slice filter) {
      int len = filter.len();
      if (len < 2) {
        return false;
      }

      int bits = (len - 1) * 8;

      // Use the encoded k so that we can read filters generated by
      // bloom filters created using different parameters.
      int k = filter.getByte(len - 1);
      if (k > 30) {
        // Reserved for potentially new encodings for short bloom filters.
        // Consider it a match.
        return true;
      }

      long h = bloomHash(key);
      long delta = (h >>> 17) | (h << 15);  // Rotate right 17 bits
      for (int j = 0; j < k; j++) {
        int bitpos = (int) (h % bits);
        if ((filter.getByte(bitpos / 8) & (1 << (bitpos % 8))) == 0) {
          return false;
        }
        h += delta;
      }
      return true;
    }
  };

  static long bloomHash(Slice input) {
    return toLong(Hash.hash(input, 0xbc9f1d34));
  }

  private static long toLong(int h) {
    return h & 0xffffffffL;
  }
}
